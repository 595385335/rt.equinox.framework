/*******************************************************************************
 * Copyright (c) 2005, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package org.eclipse.osgi.tests.security;

import java.io.File;
import java.io.FileOutputStream;
import java.net.URL;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.util.ArrayList;
import junit.framework.*;
import org.eclipse.osgi.internal.service.security.KeyStoreTrustEngine;
import org.eclipse.osgi.service.security.TrustEngine;
import org.eclipse.osgi.tests.OSGiTestsActivator;

public class KeyStoreTrustEngineTest extends TestCase {

	private static char[] PASSWORD_DEFAULT = {'c', 'h', 'a', 'n', 'g', 'e', 'i', 't'};
	private static String TYPE_DEFAULT = "JKS";

	private static TestCase[] s_tests = {
	/* findTrustAnchor tests */
	new KeyStoreTrustEngineTest("findTrustAnchor positive test: self signed trusted", new String[] {"ca1_root"}) {
		public void runTest() {
			testFindTrustAnchor0();
		}
	}, new KeyStoreTrustEngineTest("findTrustAnchor positive test: chain with root trusted", new String[] {"ca1_root"}) {
		public void runTest() {
			testFindTrustAnchor1();
		}
	}, new KeyStoreTrustEngineTest("findTrustAnchor positive test: chain with intermediate trusted", new String[] {"ca1_ou"}) {
		public void runTest() {
			testFindTrustAnchor2();
		}
	}, new KeyStoreTrustEngineTest("findTrustAnchor positive test: chain with leaf trusted", new String[] {"ca1_leafb"}) {
		public void runTest() {
			testFindTrustAnchor3();
		}
	}, new KeyStoreTrustEngineTest("findTrustAnchor negative test: untrusted self signed", null) {
		public void runTest() {
			testFindTrustAnchor4();
		}
	}, new KeyStoreTrustEngineTest("findTrustAnchor negative test: untrusted chain", null) {
		public void runTest() {
			testFindTrustAnchor5();
		}
	}, new KeyStoreTrustEngineTest("findTrustAnchor negative test: invalid chain", null) {
		public void runTest() {
			testFindTrustAnchor6();
		}
	}, new KeyStoreTrustEngineTest("findTrustAnchor negative test: incomplete-able chain", null) {
		public void runTest() {
			testFindTrustAnchor7();
		}
	}, new KeyStoreTrustEngineTest("findTrustAnchor negative test: null chain", null) {
		public void runTest() {
			testFindTrustAnchor8();
		}
	},
	/* addTrustAnchor tests */
	new KeyStoreTrustEngineTest("addTrustAnchor positive test: add with alias", null) {
		public void runTest() {
			testAddTrustAnchor0();
		}
	},/*, new KeyStoreTrustEngineTest("addTrustAnchor positive test: add with autogenerated alias", null) {
						public void runTest() {
							testAddTrustAnchor1();
						}
					}*/
	new KeyStoreTrustEngineTest("addTrustAnchor negative test: null cert specified", null) {
		public void runTest() {
			testAddTrustAnchor2();
		}
	}, new KeyStoreTrustEngineTest("addTrustAnchor negative test: existing cert specified", new String[] {"ca1_root"}) {
		public void runTest() {
			testAddTrustAnchor3();
		}
	}, new KeyStoreTrustEngineTest("addTrustAnchor negative test: existing alias specified", new String[] {"ca1_root"}) {
		public void runTest() {
			testAddTrustAnchor4();
		}
	}
	/* removeTrustAnchor tests */
	, new KeyStoreTrustEngineTest("removeTrustAnchor positive test: remove by alias", new String[] {"ca1_root"}) {
		public void runTest() {
			testRemoveTrustAnchor0();
		}
	}, new KeyStoreTrustEngineTest("removeTrustAnchor positive test: remove by cert", new String[] {"ca1_root"}) {
		public void runTest() {
			testRemoveTrustAnchor1();
		}
	}, new KeyStoreTrustEngineTest("removeTrustAnchor negative test: cert not found", null) {
		public void runTest() {
			testRemoveTrustAnchor2();
		}
	}, new KeyStoreTrustEngineTest("removeTrustAnchor negative test: by alias not found", null) {
		public void runTest() {
			testRemoveTrustAnchor3();
		}
	}, new KeyStoreTrustEngineTest("removeTrustAnchor negative test: remove by null alias", null) {
		public void runTest() {
			testRemoveTrustAnchor4();
		}
	}, new KeyStoreTrustEngineTest("removeTrustAnchor negative test: remove by null certificate", null) {
		public void runTest() {
			testRemoveTrustAnchor5();
		}
	},
	/* getTrustAnchor tests*/
	new KeyStoreTrustEngineTest("getTrustAnchor positive test: get by alias", new String[] {"ca1_root"}) {
		public void runTest() {
			testGetTrustAnchor0();
		}
	}, new KeyStoreTrustEngineTest("getTrustAnchor negative test: get by null alias", null) {
		public void runTest() {
			testGetTrustAnchor1();
		}
	}, new KeyStoreTrustEngineTest("getTrustAnchor negative test: does not exist", null) {
		public void runTest() {
			testGetTrustAnchor2();
		}
	},
	/* getAliases tests */
	new KeyStoreTrustEngineTest("getAliases positive test: get the alias list", new String[] {"ca1_root", "ca2_root"}) {
		public void runTest() {
			testGetAliases0();
		}
	}};

	public static Test suite() {
		TestSuite suite = new TestSuite("Unit tests for TrustEngine");
		for (int i = 0; i < s_tests.length; i++) {
			suite.addTest(s_tests[i]);
		}
		return suite;
	}

	private static KeyStore supportStore;
	static {
		try {
			URL supportUrl = OSGiTestsActivator.getContext().getBundle().getEntry("test_files/security/keystore.jks");
			supportStore = KeyStore.getInstance(TYPE_DEFAULT);
			supportStore.load(supportUrl.openStream(), PASSWORD_DEFAULT);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private String[] aliases;
	private KeyStore testStore;
	private File testStoreFile;
	TrustEngine engine;

	public KeyStoreTrustEngineTest() {
		//placeholder
	}

	public KeyStoreTrustEngineTest(String name, String[] aliases) {
		super(name);
		this.aliases = aliases;
	}

	protected void setUp() throws Exception {
		if (supportStore == null) {
			fail("Could not open keystore with test certificates!");
		}

		testStore = KeyStore.getInstance(TYPE_DEFAULT);
		testStore.load(null, PASSWORD_DEFAULT);
		if (aliases != null) {
			for (int i = 0; i < aliases.length; i++) {
				testStore.setCertificateEntry(aliases[i], getTestCertificate(aliases[i]));
			}
		}
		testStoreFile = File.createTempFile("teststore", "jks");
		testStore.store(new FileOutputStream(testStoreFile), PASSWORD_DEFAULT);

		engine = new KeyStoreTrustEngine(testStoreFile.getPath(), TYPE_DEFAULT, PASSWORD_DEFAULT);
	}

	protected void teardown() {
		engine = null;
		testStore = null;
		testStoreFile.delete();
	}

	private static Certificate getTestCertificate(String alias) throws KeyStoreException {
		return supportStore.getCertificate(alias);
	}

	private static Certificate[] getTestCertificateChain(String[] aliases) throws KeyStoreException {
		ArrayList certs = new ArrayList(aliases.length);
		for (int i = 0; i < aliases.length; i++) {
			certs.add(getTestCertificate(aliases[i]));
		}
		return (Certificate[]) certs.toArray(new Certificate[] {});
	}

	//findTrustAnchor positive test: self signed trusted
	public void testFindTrustAnchor0() {
		try {
			Certificate cert = engine.findTrustAnchor(new Certificate[] {getTestCertificate("ca1_root")});
			assertNotNull("Did not return a cert for self-signed case", cert);
			assertEquals("Input and output certs not equal for self-signed case", cert, getTestCertificate("ca1_root"));
		} catch (Throwable t) {
			fail("Unexpected exception testing trusted self-signed cert: " + t.getMessage());
		}
	}

	//findTrustAnchor positive test: chain with root trusted
	public void testFindTrustAnchor1() {
		try {
			Certificate cert = engine.findTrustAnchor(getTestCertificateChain(new String[] {"ca1_leafb", "ca1_ou", "ca1_root"}));
			assertNotNull("Certificate did not come back in trusted root case", cert);
			assertEquals("Output cert is not root trusted cert", cert, getTestCertificate("ca1_root"));
		} catch (Throwable t) {
			fail("Unexpected exception testing trusted root from complete chain: " + t.getMessage());
		}
	}

	//findTrustAnchor positive test: chain with intermediate trusted
	public void testFindTrustAnchor2() {
		try {
			Certificate cert = engine.findTrustAnchor(getTestCertificateChain(new String[] {"ca1_leafb", "ca1_ou", "ca1_root"}));
			assertNotNull("Certificate did not come back in trusted intermediate case", cert);
			assertEquals("Output cert is not intermediate trusted cert", cert, getTestCertificate("ca1_ou"));
		} catch (Throwable t) {
			fail("Unexpected exception testing trusted root from complete chain: " + t.getMessage());
		}
	}

	//findTrustAnchor positive test: chain with leaf trusted
	public void testFindTrustAnchor3() {
		try {
			Certificate cert = engine.findTrustAnchor(getTestCertificateChain(new String[] {"ca1_leafb", "ca1_ou", "ca1_root"}));
			assertNotNull("Certificate did not come back in trusted leaf case", cert);
			assertEquals("Output cert is not leaf trusted cert", cert, getTestCertificate("ca1_leafb"));
		} catch (Throwable t) {
			fail("Unexpected exception testing trusted root from complete chain: " + t.getMessage());
		}
	}

	//findTrustAnchor negative test: untrusted self signed
	public void testFindTrustAnchor4() {
		try {
			Certificate cert = engine.findTrustAnchor(new Certificate[] {getTestCertificate("ca2_root")});
			assertNull("Incorrectly returned a certificate for untrusted self-signed case", cert);
		} catch (Throwable t) {
			fail("Unexpected exception testing untrusted self-signed cert: " + t.getMessage());
		}
	}

	//findTrustAnchor negative test: untrusted chain
	public void testFindTrustAnchor5() {
		try {
			Certificate cert = engine.findTrustAnchor(getTestCertificateChain(new String[] {"ca2_leafb", "ca2_ou", "ca2_root"}));
			assertNull("Incorrectly returned a certificate for untrusted chain case", cert);
		} catch (Throwable t) {
			fail("Unexpected exception testing untrusted chain: " + t.getMessage());
		}
	}

	//findTrustAnchor negative test: invalid chain
	public void testFindTrustAnchor6() {
		try {
			Certificate cert = engine.findTrustAnchor(getTestCertificateChain(new String[] {"ca2_leafa", "ca1_root"}));
			assertTrue("Did not throw CertificateException on invalid certificate chain", true);
		} catch (Throwable t) {
			assertTrue("Incorrect exception thrown on invalid certificate chain", t instanceof CertificateException);
		}
	}

	//findTrustAnchor negative test: incomplete-able chain
	public void testFindTrustAnchor7() {
		try {
			Certificate cert = engine.findTrustAnchor(getTestCertificateChain(new String[] {"ca1_leafb", "ca1_root"}));
			assertTrue("Did not throw CertificateException on incomplete certificate chain", true);
		} catch (Throwable t) {
			assertTrue("Incorrect exception thrown on incomplete certificate chain", t instanceof CertificateException);
		}
	}

	//findTrustAnchor negative test: null chain
	public void testFindTrustAnchor8() {
		try {
			engine.findTrustAnchor(null);
			assertTrue("Did not throw IllegalArgumentException on NULL certificate", true);
		} catch (Throwable t) {
			assertTrue("Incorrect exception thrown on NULL certificate", t instanceof IllegalArgumentException);
		}
	}

	//testAddTrustAnchor positive test: add with alias
	public void testAddTrustAnchor0() {
		try {
			String alias = engine.addTrustAnchor(getTestCertificate("ca1_root"), "ca1_root");
			assertEquals("Alias returned does not equal alias input", alias, "ca1_root");

		} catch (Throwable t) {
			fail("Unexpected exception adding trusted root: " + t.getMessage());
		}
	}

	//testAddTrustAnchor positive test: add with autogenerated alias
	public void testAddTrustAnchor1() {
		try {
			String alias = engine.addTrustAnchor(getTestCertificate("ca1_root"), null);
			assertNotNull("Generated alias was not correctly returned", alias);
		} catch (Throwable t) {
			fail("Unexpected exception adding trusted root (autogen alias): " + t.getMessage());
		}
	}

	//testAddTrustAnchor negative test: null cert specified
	public void testAddTrustAnchor2() {
		try {
			String alias = engine.addTrustAnchor(null, "ca1_root");
			assertTrue("Did not throw IllegalArgumentException on NULL certificate", true);
		} catch (Throwable t) {
			assertTrue("Incorrect exception thrown on NULL certificate", t instanceof IllegalArgumentException);
		}
	}

	//testAddTrustAnchor negative test: existing cert specified
	public void testAddTrustAnchor3() {
		try {
			String alias = engine.addTrustAnchor(getTestCertificate("ca1_root"), "new_root");
			assertTrue("Did not throw IllegalArgumentException on duplicate cert", true);
		} catch (Throwable t) {
			assertTrue("Incorrect exception thrown on duplicate cert", t instanceof CertificateException);
		}
	}

	//testAddTrustAnchor negative test: existing alias specified
	public void testAddTrustAnchor4() {
		try {
			String alias = engine.addTrustAnchor(getTestCertificate("ca1_root"), "ca1_root");
			assertTrue("Did not throw IllegalArgumentException on duplicate alias", true);
		} catch (Throwable t) {
			assertTrue("Incorrect exception thrown on duplicate alias", t instanceof CertificateException);
		}
	}

	//removeTrustAnchor positive test: remove by alias
	public void testRemoveTrustAnchor0() {
		try {
			engine.removeTrustAnchor("ca1_root");
		} catch (Throwable t) {
			fail("Unexpected exception thrown when removing by alias: " + t.getMessage());
		}
	}

	//removeTrustAnchor positive test: remove by cert
	public void testRemoveTrustAnchor1() {
		try {
			engine.removeTrustAnchor(getTestCertificate("ca1_root"));
		} catch (Throwable t) {
			fail("Unexpected exception thrown when removing by cert: " + t.getMessage());
		}
	}

	//removeTrustAnchor negative test: cert not found
	public void testRemoveTrustAnchor2() {
		try {
			engine.removeTrustAnchor(getTestCertificate("ca1_root"));
			assertTrue("Did not throw CertificateException on cert not found", true);
		} catch (Throwable t) {
			assertTrue("Incorrect exception thrown on remove by cert", t instanceof CertificateException);
		}
	}

	//removeTrustAnchor negative test: by alias not found
	public void testRemoveTrustAnchor3() {
		try {
			engine.removeTrustAnchor("ca1_root");
			assertTrue("Did not throw CertificateException on alias not found", true);
		} catch (Throwable t) {
			assertTrue("Incorrect exception thrown on remove by alias", t instanceof CertificateException);
		}
	}

	//removeTrustAnchor negative test: remove by null alias
	public void testRemoveTrustAnchor4() {
		try {
			engine.removeTrustAnchor((String) null);
			assertTrue("Did not throw CertificateException on alias null", true);
		} catch (Throwable t) {
			assertTrue("Incorrect exception thrown on remove by null alias", t instanceof IllegalArgumentException);
		}
	}

	//removeTrustAnchor negative test: remove by null certificate
	public void testRemoveTrustAnchor5() {
		try {
			engine.removeTrustAnchor((Certificate) null);
			assertTrue("Did not throw IllegalArgumentException on remove by cert null", true);
		} catch (Throwable t) {
			assertTrue("Incorrect exception thrown on remove by null cert", t instanceof IllegalArgumentException);
		}
	}

	//getTrustAnchor positive test: get by alias
	public void testGetTrustAnchor0() {
		try {
			Certificate cert = engine.getTrustAnchor("ca1_root");
			assertEquals("Did not get expected certificate", getTestCertificate("ca1_root"), cert);
		} catch (Throwable t) {
			fail("Unexpected exception when retrieving trust anchor: " + t.getMessage());
		}
	}

	//getTrustAnchor negative test: get by null alias
	public void testGetTrustAnchor1() {
		try {
			Certificate cert = engine.getTrustAnchor(null);
			assertTrue("Did not throw IllegalArgumentException on get by alias null", true);
		} catch (Throwable t) {
			assertTrue("Incorrect exception thrown on remove by null alias", t instanceof IllegalArgumentException);
		}
	}

	//getTrustAnchor negative test: does not exist
	public void testGetTrustAnchor2() {
		try {
			Certificate cert = engine.getTrustAnchor("ca1_root");
			assertTrue("Did not throw CertificateException on get by unknown alias", true);
		} catch (Throwable t) {
			assertTrue("Incorrect exception thrown on remove by unknown alias", t instanceof CertificateException);
		}
	}

	//getAliases positive test: get the alias list
	public void testGetAliases0() {
		try {
			String[] aliases = engine.getAliases();
		} catch (Throwable t) {
			fail("Unexpected exception when retrieving alias list: " + t.getMessage());
		}

	}
	//TODO: thread safety tests
	//TODO: performance tests
}
